generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Status {
  received
  preparing
  completed
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Size {
  id          String        @id @default(uuid())
  size        String        @unique
  ProductSize ProductSize[]
}

model ProductSize {
  id         String @id @default(uuid())
  Size       Size   @relation(fields: [sizeId], references: [id])
  inStock    Int
  limitToBuy Int?

  // relation
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  sizeId    String
}

model Product {
  id          String        @id @default(uuid())
  title       String
  description String
  price       Float         @default(0)
  slug        String        @unique
  tags        String[]      @default([])
  gender      Gender
  Sizes       ProductSize[]

  // Relaciones
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  emailVerified Boolean? @default(false)
  password      String
  role          Role     @default(user)
  image         String?

  address UserAddress?

  // Relaciones
  Order Order[]
}

model Province {
  id   String @id @default(uuid())
  name String
  tax  Float

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // Relaciones
  country   Province @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Order de compras
model Order {
  id           String   @id @default(uuid())
  numeration   Int      @default(autoincrement())
  status       Status   @default(received)
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?

  @@index([status])
}

model OrderItem {
  id    String @id @default(uuid())
  price Float

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relaciones
  country   Province @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
